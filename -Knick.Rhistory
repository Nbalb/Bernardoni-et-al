map(seq(1:length(shrRes)), function(i, ngenes = 4){
res <- shrRes[[i]] %>%
as.data.frame() %>%
rownames_to_column("gene_name") %>%
mutate(gene_id = rowRanges(des)$gene_id) # We can do this because because all.equal(rowRanges(des)$gene_name, rownames(shrRes[[i]])) #[1] TRUE
ord <- res %>%
filter(padj < 0.05) %>%
arrange(-abs(log2FoldChange*-log10(padj))) %>%
slice_head(n = ngenes) %>%
bind_rows(res %>% filter(gene_name %in% c("nub", "pros", "sd", "vg")))
best <- ord %>%
pull(gene_id) %>%
map_dfr(function(x){
geneCounts <- plotCounts(dds = des,
gene = x,
intgroup = c("gt", "names"),
returnData = T) %>%
mutate(gene = x)
}) %>%
inner_join(ord %>% select(gene_name, gene_id), by = c("gene" = "gene_id")) %>%
mutate(gene_name = factor(gene_name, levels = unique(ord$gene_name)))
png(paste0("plots/002_7.", names(shrRes)[i], "_counts.png"), h = 2000, w = 4000, res = 600)
p <-  ggplot(best, aes(x = gt, y = count, color = names)) +
scale_y_log10() +
ggbeeswarm::geom_beeswarm(size = 3, cex = 3, alpha = 0.7) +
facet_wrap(~gene_name, nrow = 2) +
labs(title = paste0("Best DE genes and differentiation markers"),
x = "Genotype",
y = parse(text=paste("log[10]","~normalized ~counts"))) +
scale_x_discrete(labels = function(x) str_replace(x, "_", "\n")) +
theme(plot.title = element_text(hjust = 0.5))
print(p)
dev.off()
})
dev.off
dev.off()
dev.off()
dev.off()
# Plot gene counts
map(seq(1:length(shrRes)), function(i, ngenes = 4){
res <- shrRes[[i]] %>%
as.data.frame() %>%
rownames_to_column("gene_name") %>%
mutate(gene_id = rowRanges(des)$gene_id) # We can do this because because all.equal(rowRanges(des)$gene_name, rownames(shrRes[[i]])) #[1] TRUE
ord <- res %>%
filter(padj < 0.05) %>%
arrange(-abs(log2FoldChange*-log10(padj))) %>%
slice_head(n = ngenes) %>%
bind_rows(res %>% filter(gene_name %in% c("nub", "pros", "sd", "vg")))
best <- ord %>%
pull(gene_id) %>%
map_dfr(function(x){
geneCounts <- plotCounts(dds = des,
gene = x,
intgroup = c("gt", "names"),
returnData = T) %>%
mutate(gene = x)
}) %>%
inner_join(ord %>% select(gene_name, gene_id), by = c("gene" = "gene_id")) %>%
mutate(gene_name = factor(gene_name, levels = unique(ord$gene_name)))
png(paste0("plots/002_7.", names(shrRes)[i], "_counts.png"), h = 2000, w = 4000, res = 600)
p <-  ggplot(best, aes(x = gt, y = count, color = names)) +
scale_y_log10() +
ggbeeswarm::geom_beeswarm(size = 3, cex = 3, alpha = 0.7) +
facet_wrap(~gene_name, nrow = 2) +
labs(title = paste0("Best DE genes and differentiation markers"),
x = "Genotype",
y = parse(text=paste("log[10]","~normalized ~counts"))) +
scale_x_discrete(labels = function(x) str_replace(x, "_", "\n")) +
theme(plot.title = element_text(hjust = 0.5))
print(p)
dev.off()
})
map(seq(1:length(shrRes)), function(i){
name <- names(shrRes)[i]
plotres <- shrRes[[i]] %>% as.data.frame() %>% rownames_to_column()
goi <- c("Antp", "ftz", "nub", "sd", "vg", "pros")
png(paste0("plots/002_9.", i, "Volcano_plot_", name, "_shr.png"), h = 3500, w = 6500, res = 700)
labs <- plotres %>%
filter(abs(log2FoldChange) > 7 | padj < 1e-150) %>%
slice_max(order_by = -log10(padj)*abs(log2FoldChange), n = 15) %>%
pull(rowname)
gglabs <- ifelse(plotres$rowname %in% c(goi, labs),
ifelse(plotres$rowname == "His1:CG33858", "", plotres$rowname), "")
p <- EnhancedVolcano(plotres, subtitle = "padj cutoff = 0.05 \nlog2FC cutoff = 1",
lab = "",
x = 'log2FoldChange',
y = 'padj',
title = paste0('Differential expression in ', name),
pCutoff = 0.05, #0.05 cutoff
FCcutoff = 1,
axisLabSize = 14,
titleLabSize = 14,
subtitleLabSize = 10,
captionLabSize = 10,
labSize = 4,
legendLabSize = 10,
legendPosition = "right",
drawConnectors = T,
maxoverlapsConnectors = Inf,
caption = paste0("Downregulated genes = ",
plotres %>%
filter(log2FoldChange < -1 & padj < 0.05) %>%
nrow(),
"     ",
"Upregulated genes = ",
plotres %>%
filter(log2FoldChange > 1 & padj < 0.05) %>%
nrow()),
#selectLab = labs
) +
theme(plot.caption = element_text(hjust = 0.5)) +
geom_text_repel(label = gglabs,
size = 3.5,
min.segment.length = 0,
max.overlaps = Inf,
arrow = arrow(length = unit(0.015, "npc"), ends = "first", type = "closed"),
ylim = c(10,300),
#max.time = 5,
box.padding = 0.7,
point.padding = 0.1,
segment.size = 0.3,
segment.color = "#00000070"
)
print(p)
dev.off()
})
-log10(5)
LOG10(-5)
log10(-5)
log10(0.05)
# Step survival
source("../../../functions/stepsurvival_cox.R")
# Step survival
source("../../functions/stepsurvival_cox.R")
load("../../../dataset/big_masterset/GTEx/tissues/target_NBL-survival.rda")
load("../../dataset/big_masterset/GTEx/tissues/target_NBL-survival.rda")
load("../../dataset/big_masterset/GTEx/tissues/target_NBL-expmat.rda")
colnames(expmat) <- gsub(pattern = ".{8}$", replacement =  "", colnames(expmat))
expvar <- apply(expmat, 1, var)
expvar <- names(expvar[expvar > 0.1])
expmat <- expmat[expvar,]
common<-intersect(colnames(expmat),names(survival))
expmat<-expmat[,common]
survival<-survival[common]
mygene <- "UTP3"
oritrack <- expmat[mygene,]
plotstepsurv(oritrack, survival, ngroups = 6, title = paste0("KM survival for ", mygene), cox_survival = TRUE)
require(gplots)
require(survival)
### Classic Survival: split dataset on the median of gene expression
plotclassicsurv<-function(oritrack,survival,mygene,title="Kaplan Meier Curves",colorizeSignificant=FALSE,plot=TRUE,sizelegend=1){
# Define types for survivalfit
track<-oritrack
track[]<-"Other"
track[oritrack>median(oritrack)]<-paste0(mygene," high")
track[oritrack<=median(oritrack)]<-paste0(mygene," low")
track<-as.factor(track)
track<-relevel(track,ref=paste0(mygene," low"))
# Fit model
sfit<-survfit(survival~track)
# Survdiff for all vs. all p-value
if(length(levels(track))==1){return(1)}
sdiff<-survdiff(survival~track)
p <- 1 - pchisq(sdiff$chisq, df=length(sdiff$n) - 1)
# Sign? When I did this I understood it, now not anymore
events_difference<-sdiff$obs-sdiff$exp
if(events_difference[1]>events_difference[length(events_difference)]){
sign<-"neg"
} else {
sign<-"pos"
}
# OE<-(sdiff$obs-sdiff$exp)^2/sdiff$exp
# sign<-"neg"
# if(OE[1]<=OE[2]){sign<-"pos"}
if(plot){
# Color matching
colors<-rep(NA,2)
colors[grep("high",names(sfit$strata))]<-"red3"
colors[grep("low",names(sfit$strata))]<-"cornflowerblue"
# Plot
plot(sfit,lwd=3,
main=title,
xlab="days",ylab="Percent Survival",
col=colors,mark.time=TRUE
)
mtext(paste("p =",signif(p,4)," (Samples: ",nrow(survival)," - Deaths: ",sum(survival[,2],na.rm=TRUE),")",sep=""),cex=0.65)
if(colorizeSignificant){
if(p<=0.05&sign=="pos"){rect(par("usr")[1], par("usr")[3], par("usr")[2], par("usr")[4], col = "#FF000022")}
if(p<=0.05&sign=="neg"){rect(par("usr")[1], par("usr")[3], par("usr")[2], par("usr")[4], col = "#FF000022")}
}
grid(col="grey")
legend("bottomleft",col=colors,legend=substr(names(sfit$strata),7,nchar(names(sfit$strata))),lty=1,lwd=3,bg="white",cex=sizelegend)
}
if(sign=="neg"){
p<--p
}
return(p)
}
### Step Survival: divide data into overlapping groups, as in the paper by Gonzalo
plotstepsurv<-function(oritrack, survival, ngroups=10, ylab="Gene expression", title=NULL, plot=TRUE, layout=TRUE, cox_survival = FALSE, sizelegend = 0.9, mark.time=TRUE){
if(layout & plot){
layout(t(matrix(c(1,2))),width=c(1,2))
}
# Sort by gene exp
oritrack<-sort(oritrack)
survival<-survival[names(oritrack),]
if(plot){
plot(oritrack,ylab=ylab,pch=20,cex.axis=0.6)
#grid()
mtext(title,side=3,line=-1.5,outer=TRUE,cex=1.5,font=2)
}
# Gene groups
chunkfun <- function(x,n) split(x, cut(seq_along(x), n, labels = FALSE))
track<-chunkfun(oritrack, ngroups)
survcols<-colorpanel(ngroups-1,"blue","gray90","red")
for(i in 1:(ngroups-1)){
ycut<-max(track[[i]])
xcut<-which(oritrack==ycut)
seglength<-floor(length(oritrack)/10)
if(plot){
segments(xcut-seglength,ycut,xcut+seglength,ycut,col=survcols[i],lwd=6)
}
}
# Define types for survfit
track<-cut(seq_along(oritrack), ngroups, labels = FALSE)
samplesingroups<-c()
samplestotake<-c()
for(i in 1:(ngroups-1)){
samplesingroups<-c(samplesingroups,rep(i,length(which(track==i|track==(i+1)))))
samplestotake<-c(samplestotake,which(track==i|track==(i+1)))
}
stepsurv<-survival[samplestotake,]
stepexp<-oritrack[samplestotake]
track<-as.factor(samplesingroups)
names(track)<-names(stepexp)
# Fit model
sfit<-survfit(stepsurv~track)
# Survdiff for all vs. all p-value
sdiff<-survdiff(stepsurv~track)
p <- 1 - pchisq(sdiff$chisq, df=2)
# Sign?
events_difference<-sdiff$obs-sdiff$exp
if(events_difference[1]>events_difference[length(events_difference)]){
sign<-"neg"
} else {
sign<-"pos"
}
#Cox model
if(cox_survival){
res.cox <- summary(coxph(survival ~ oritrack))
cox_p <- signif(res.cox$coefficients[1,5], 3)
cox_coef <- signif(res.cox$coefficients[1,1], 3)
}
# OE<-(sdiff$obs-sdiff$exp)^2/sdiff$exp
# sign<-"neg"
# if(OE[1]<=OE[2]){sign<-"pos"}
# Plot
# ?plot.survfit
if(plot){
plot(sfit,lwd=5,
xlab="Survival time (days)",ylab="Percent Survival",
col=survcols,mark.time=mark.time,main=""
)
#grid(col="grey")
legend("bottomleft",
legend= c(paste0(mygene, " High"), paste0(mygene, " Low")),
col = c("red", "blue"),
lty=1,
lwd=3,
bg="white",
cex=sizelegend)
mtext(paste("KM model p = ", scales::scientific(p, digits = 4)," (Samples: ",nrow(survival)," - Deaths: ",sum(survival[,2],na.rm=TRUE),")",sep=""),
side = 3,
line = -2.5,
outer = TRUE,
cex = sizelegend)
if(cox_survival){
mtext(paste0("Cox coefficient = ", cox_coef, "    ",
"Cox model p = ", scales::scientific(cox_p, digits = 4)),
cex = sizelegend,
line = -3.5,
outer = TRUE)
}
if(sign=="neg"){
p<--p
}
}
return(p)
}
# Step survival KM curve
source("../../functions/stepsurvival_cox.R")
plotstepsurv(oritrack, survival, ngroups = 6, title = paste0("KM survival for ", mygene), cox_survival = TRUE)
mygene <- "MYCBP2"
oritrack <- expmat[mygene,]
plotstepsurv(oritrack, survival, ngroups = 6, title = paste0("KM survival for ", mygene), cox_survival = TRUE)
dev.off()
mygene <- "UTP3"
oritrack <- expmat[mygene,]
png(paste0("../plots/004_2.1_Stepsurvival_", mygene, ".png"), h = 3000, w = 4500, res = 600)
plotstepsurv(oritrack, survival, ngroups = 6, title = paste0("KM survival for ", mygene), cox_survival = TRUE)
dev.off()
mygene <- "MYCBP2"
oritrack <- expmat[mygene,]
png(paste0("../plots/004_2.2_Stepsurvival_", mygene, ".png"), h = 3000, w = 4500, res = 600)
plotstepsurv(oritrack, survival, ngroups = 6, title = paste0("KM survival for ", mygene), cox_survival = TRUE)
dev.off()
colnames(expmat) <- gsub(pattern = ".{8}$", replacement =  "", colnames(expmat))
expvar <- apply(expmat, 1, var)
expvar <- names(expvar[expvar > 0.1])
expmat <- expmat[expvar,]
common<-intersect(colnames(expmat),names(survival))
expmat<-expmat[,common]
survival<-survival[common]
mygene <- "UTP3"
oritrack <- expmat[mygene,]
png(paste0("../plots/004_2.1_Stepsurvival_", mygene, ".png"), h = 3000, w = 4500, res = 600)
mygene <- "UTP3"
oritrack <- expmat[mygene,]
png(paste0("plots/004_2.1_Stepsurvival_", mygene, ".png"), h = 3000, w = 4500, res = 600)
plotstepsurv(oritrack, survival, ngroups = 6, title = paste0("KM survival for ", mygene), cox_survival = TRUE)
dev.off()
plotstepsurv(oritrack, survival, ngroups = 6, title = paste0("KM survival for ", mygene), cox_survival = TRUE)
mygene <- "UTP3"
oritrack <- expmat[mygene,]
plotstepsurv(oritrack, survival, ngroups = 6, title = paste0("KM survival for ", mygene), cox_survival = TRUE)
# Step survival KM curve
source("../../functions/stepsurvival_cox.R")
load("../../dataset/big_masterset/GTEx/tissues/target_NBL-survival.rda")
load("../../dataset/big_masterset/GTEx/tissues/target_NBL-expmat.rda")
colnames(expmat) <- gsub(pattern = ".{8}$", replacement =  "", colnames(expmat))
expvar <- apply(expmat, 1, var)
expvar <- names(expvar[expvar > 0.1])
expmat <- expmat[expvar,]
common<-intersect(colnames(expmat),names(survival))
expmat<-expmat[,common]
survival<-survival[common]
mygene <- "UTP3"
oritrack <- expmat[mygene,]
plotstepsurv(oritrack, survival, ngroups = 6, title = paste0("KM survival for ", mygene), cox_survival = TRUE)
dev.off()
png(paste0("plots/004_2.1_Stepsurvival_", mygene, ".png"), h = 3000, w = 4500, res = 600)
plotstepsurv(oritrack, survival, ngroups = 6, title = paste0("KM survival for ", mygene), cox_survival = TRUE)
dev.off()
mygene <- "MYCBP2"
oritrack <- expmat[mygene,]
png(paste0("plots/004_2.2_Stepsurvival_", mygene, ".png"), h = 3000, w = 4500, res = 600)
plotstepsurv(oritrack, survival, ngroups = 6, title = paste0("KM survival for ", mygene), cox_survival = TRUE)
dev.off()
require(gplots)
require(survival)
### Classic Survival: split dataset on the median of gene expression
plotclassicsurv<-function(oritrack,survival,mygene,title="Kaplan Meier Curves",colorizeSignificant=FALSE,plot=TRUE,sizelegend=1){
# Define types for survivalfit
track<-oritrack
track[]<-"Other"
track[oritrack>median(oritrack)]<-paste0(mygene," high")
track[oritrack<=median(oritrack)]<-paste0(mygene," low")
track<-as.factor(track)
track<-relevel(track,ref=paste0(mygene," low"))
# Fit model
sfit<-survfit(survival~track)
# Survdiff for all vs. all p-value
if(length(levels(track))==1){return(1)}
sdiff<-survdiff(survival~track)
p <- 1 - pchisq(sdiff$chisq, df=length(sdiff$n) - 1)
# Sign? When I did this I understood it, now not anymore
events_difference<-sdiff$obs-sdiff$exp
if(events_difference[1]>events_difference[length(events_difference)]){
sign<-"neg"
} else {
sign<-"pos"
}
# OE<-(sdiff$obs-sdiff$exp)^2/sdiff$exp
# sign<-"neg"
# if(OE[1]<=OE[2]){sign<-"pos"}
if(plot){
# Color matching
colors<-rep(NA,2)
colors[grep("high",names(sfit$strata))]<-"red3"
colors[grep("low",names(sfit$strata))]<-"cornflowerblue"
# Plot
plot(sfit,lwd=3,
main=title,
xlab="days",ylab="Percent Survival",
col=colors,mark.time=TRUE
)
mtext(paste("p =",signif(p,4)," (Samples: ",nrow(survival)," - Deaths: ",sum(survival[,2],na.rm=TRUE),")",sep=""),cex=0.65)
if(colorizeSignificant){
if(p<=0.05&sign=="pos"){rect(par("usr")[1], par("usr")[3], par("usr")[2], par("usr")[4], col = "#FF000022")}
if(p<=0.05&sign=="neg"){rect(par("usr")[1], par("usr")[3], par("usr")[2], par("usr")[4], col = "#FF000022")}
}
grid(col="grey")
legend("bottomleft",col=colors,legend=substr(names(sfit$strata),7,nchar(names(sfit$strata))),lty=1,lwd=3,bg="white",cex=sizelegend)
}
if(sign=="neg"){
p<--p
}
return(p)
}
### Step Survival: divide data into overlapping groups, as in the paper by Gonzalo
plotstepsurv<-function(oritrack, survival, ngroups=10, ylab="Gene expression", title=NULL, plot=TRUE, layout=TRUE, cox_survival = FALSE, sizelegend = 0.9, mark.time=TRUE){
if(layout & plot){
layout(t(matrix(c(1,2))),width=c(1,2))
}
# Sort by gene exp
oritrack<-sort(oritrack)
survival<-survival[names(oritrack),]
if(plot){
plot(oritrack,ylab=ylab,pch=20,cex.axis=0.6)
#grid()
mtext(title,side=3,line=-1.5,outer=TRUE,cex=1.5,font=2)
}
# Gene groups
chunkfun <- function(x,n) split(x, cut(seq_along(x), n, labels = FALSE))
track<-chunkfun(oritrack, ngroups)
survcols<-colorpanel(ngroups-1,"blue","gray90","red")
for(i in 1:(ngroups-1)){
ycut<-max(track[[i]])
xcut<-which(oritrack==ycut)
seglength<-floor(length(oritrack)/10)
if(plot){
segments(xcut-seglength,ycut,xcut+seglength,ycut,col=survcols[i],lwd=6)
}
}
# Define types for survfit
track<-cut(seq_along(oritrack), ngroups, labels = FALSE)
samplesingroups<-c()
samplestotake<-c()
for(i in 1:(ngroups-1)){
samplesingroups<-c(samplesingroups,rep(i,length(which(track==i|track==(i+1)))))
samplestotake<-c(samplestotake,which(track==i|track==(i+1)))
}
stepsurv<-survival[samplestotake,]
stepexp<-oritrack[samplestotake]
track<-as.factor(samplesingroups)
names(track)<-names(stepexp)
# Fit model
sfit<-survfit(stepsurv~track)
# Survdiff for all vs. all p-value
sdiff<-survdiff(stepsurv~track)
p <- 1 - pchisq(sdiff$chisq, df=2)
# Sign?
events_difference<-sdiff$obs-sdiff$exp
if(events_difference[1]>events_difference[length(events_difference)]){
sign<-"neg"
} else {
sign<-"pos"
}
#Cox model
if(cox_survival){
res.cox <- summary(coxph(survival ~ oritrack))
cox_p <- signif(res.cox$coefficients[1,5], 3)
cox_coef <- signif(res.cox$coefficients[1,1], 3)
}
# OE<-(sdiff$obs-sdiff$exp)^2/sdiff$exp
# sign<-"neg"
# if(OE[1]<=OE[2]){sign<-"pos"}
# Plot
# ?plot.survfit
if(plot){
plot(sfit,lwd=5,
xlab="Survival time (days)",ylab="Percent Survival",
col=survcols,mark.time=mark.time,main=""
)
#grid(col="grey")
legend("bottomleft",
legend= c(paste0(mygene, " High"), paste0(mygene, " Low")),
col = c("red", "blue"),
lty=1,
lwd=3,
bg="white",
cex=sizelegend)
mtext(paste("KM model p = ", scales::scientific(p, digits = 4)," (Samples: ",nrow(survival)," - Deaths: ",sum(survival[,2],na.rm=TRUE),")",sep=""),
side = 3,
line = -2.5,
outer = TRUE,
cex = sizelegend)
if(cox_survival){
mtext(paste0("Cox model p = ", scales::scientific(cox_p, digits = 4), "    ",
"Cox coefficient = ", cox_coef),
cex = sizelegend,
line = -3.5,
outer = TRUE)
}
if(sign=="neg"){
p<--p
}
}
return(p)
}
mygene <- "UTP3"
oritrack <- expmat[mygene,]
png(paste0("plots/004_2.1_Stepsurvival_", mygene, ".png"), h = 3000, w = 4500, res = 600)
plotstepsurv(oritrack, survival, ngroups = 6, title = paste0("KM survival for ", mygene), cox_survival = TRUE)
dev.off()
mygene <- "MYCBP2"
oritrack <- expmat[mygene,]
png(paste0("plots/004_2.2_Stepsurvival_", mygene, ".png"), h = 3000, w = 4500, res = 600)
plotstepsurv(oritrack, survival, ngroups = 6, title = paste0("KM survival for ", mygene), cox_survival = TRUE)
dev.off()
df1 <- data.frame(a = c(1,2,3), b = c(4,5,6))
df1
df2 <- data.frame(a = c(7,8,9), b = c(10,11,12))
df2
merge(df1, df2)
?grid
library(tidymodels)
grid_regular(a = 1:10, b = 5:7)
grid_regular(a = c(1:10), b = c(5:7))
?grid_regular
expand.grid(x = 1:5, y = 6:10)
